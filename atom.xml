<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://LuckinSven.github.io</id>
    <title>不修仙的七</title>
    <updated>2019-12-07T15:02:16.037Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://LuckinSven.github.io"/>
    <link rel="self" href="https://LuckinSven.github.io/atom.xml"/>
    <subtitle>风筝有风，海豚有海</subtitle>
    <logo>https://LuckinSven.github.io/images/avatar.png</logo>
    <icon>https://LuckinSven.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 不修仙的七</rights>
    <entry>
        <title type="html"><![CDATA[Sven写在大雪那天并未下雪的年终总结]]></title>
        <id>https://LuckinSven.github.io/post/sven-xie-zai-da-xue-na-tian-bing-wei-xia-xue-de-nian-zhong-zong-jie</id>
        <link href="https://LuckinSven.github.io/post/sven-xie-zai-da-xue-na-tian-bing-wei-xia-xue-de-nian-zhong-zong-jie">
        </link>
        <updated>2019-12-07T14:57:42.000Z</updated>
        <summary type="html"><![CDATA[<p>小北，十二月了，还没下雪，今年就要过去了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>小北，十二月了，还没下雪，今年就要过去了。</p>
<!-- more -->
<p>小北，我觉得我对世界缺少热爱，总是不太高兴，见到风和日丽不高兴、高山流水不高兴、推杯换盏不高兴、读万卷书不高兴、行万里路不高兴、我问师傅我是不会出了什么问题，我师父让我来找你，可是你也不高兴。可是我师父是对的。</p>
<p>又是一年将至，未来是否可期，还未知？但是过往的曾经，应该值得珍惜。</p>
<p>2019的上半年的主题词是：<strong>不安</strong></p>
<h3 id="找工作">找工作：</h3>
<p>找工作的不安，与复试的不安。毕业了，方知应届生的身份可贵，只需要一年，新人就能变成老人，然后自动丧失所有的犯错的权利。</p>
<p>大多数普通的工作，只是属于业务领域，并不在技术有上很高的壁垒，通常这家能够存活的原因，是因为没有太多人在竞争，没有太多的人在做这件事情。机会红利，带着风险太大，如果未来允许，最好还是不要做业务岗。</p>
<h3 id="复试">复试：</h3>
<p>复试就是面试，面试就是重复而来的奔波。面试好不好，基本只取决于你面试多不多。作为半个学生的自己，当初的眼界，真是小的可怜。不够广，亦不够精。</p>
<p>2019下半年的主题词是：<strong>幸运&amp;希望</strong></p>
<h3 id="实习">实习：</h3>
<p>第一次坐着上班，凭借微弱的技术吃饭。相比以前的体力兼职，有太多的感悟。带团队比一个人单干更难，难的多。</p>
<p>开学前，与导师见面，简单了解一下。<br>
九月，东莞之行，云计算容器安全定稿会议，硕士生涯的起点。<br>
十月，开发两个爬虫，完成兼职。<br>
十一月，提交攀登计划，申请立项。<br>
十二月，安鸿科技，面向中小学的安全教育业务实现，负责技术部分。<br>
能有今天的种种一切，深感幸运。</p>
<p>今日大雪，没有下雪，未来也不会下雪。<br>
那未来的你，会不会突然出现？<br>
你是希望。</p>
<h3 id="后花园">后花园：</h3>
<p>这里的宿舍早上没有热水，不能洗淋浴，但是我仍然每天起床，洗头，去实验室，没有任何改变，离别本来就是那样。</p>
<p>前两周去唱歌，点了首北京欢迎你，呵，突然十年便过去，依稀觉得仿佛还是昨天，时间好快。我忘记了时间的流逝，忘记了很多事情，但是没忘记你，我觉得我应该忘记你。</p>
<h3 id="做个梦给你">做个梦给你：</h3>
<p>我不止一次的说过，这世上的一切，是你们不经意的一笔一划，留我年复一年的朗读。<br>
我很想念你们，想念家乡，想念回不去的地方，想念无可奈何的地方。<br>
能不能重来一次，我爱的人，和我爱的人，都在我的身边。<br>
将故事重写一遍，我一定好好珍惜。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git版本控制——入门]]></title>
        <id>https://LuckinSven.github.io/post/git-ban-ben-kong-zhi-ru-men</id>
        <link href="https://LuckinSven.github.io/post/git-ban-ben-kong-zhi-ru-men">
        </link>
        <updated>2019-11-30T12:01:36.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>Git是世界上最棒的版本管理工具！</strong> 😆😆</p>
<p>本文暂不涉及分支与多人协作。</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>Git是世界上最棒的版本管理工具！</strong> 😆😆</p>
<p>本文暂不涉及分支与多人协作。</p>
<!-- more -->
<h3 id="准备工作">准备工作：</h3>
<p>第一步，软件安装：<br>
下载对平台软件进行安装。</p>
<p>第二步，环境配置：<br>
在git bash直接敲入：<br>
git config --global user.name &quot;Sven&quot;<br>
git config --global user.email &quot;liulangzhou@foxmail.com&quot;</p>
<p>以后的提交文件，会打上这些信息的烙印。</p>
<h3 id="开始使用">开始使用：</h3>
<p>第一步，仓库建立<br>
在win下，需要在根目录下创建仓库。先使用cd 命令进入 文件夹，利用Git init，将文件夹初始化为仓库(responistory)</p>
<p>第二步：本地推送<br>
在仓库内新建文件，a.txt,使用subtex3 写入部分内容</p>
<ol>
<li>git add a.text    将文件添加到工作区</li>
<li>git commit -m &quot;注释&quot;   将文件提交到工作区<br>
两行命令完成后，文件会被推送到仓库中。</li>
<li>git status 可以使用观察此时仓库的状态。</li>
</ol>
<p>第三步：版本管理</p>
<ol>
<li>修改，修改后文件，使用  git  diff可以看出修改的部门。</li>
<li>提交后，还可以通过git log观察历史提交记录</li>
<li>回退也是依据这里,git reset --hard HEAD^</li>
</ol>
<p>第四步：远程管理（SSH配置此处不讲）</p>
<ol>
<li>
<p>自己的仓库推送至远端</p>
</li>
<li>
<p>在本地的仓库（learngit）下：<br>
使用  git remote add origin git@github.com:LuckinSven/learngit.git<br>
此命令将本地仓库关联至远端。<br>
关联之后，推送：</p>
</li>
<li>
<p>git push -u origin master 将本地仓库的所有资料，一次全部推送至远端</p>
</li>
<li>
<p>git push origin master,增量推送,下次修改使用</p>
</li>
<li>
<p>克隆远端仓库至本地</p>
</li>
<li>
<p>在自己的远端上，建立好新的仓库，<br>
使用 git clone git@github.com:LuckinSven/Clone_origin.git<br>
克隆至本地，此命令应该在根目录下敲，会生成新的文件夹<br>
ps:</p>
</li>
<li>
<p>如果是想克隆别人的项目，应该先fork至自己的仓库后，再clone,这样才能推送修改</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式——入门]]></title>
        <id>https://LuckinSven.github.io/post/zheng-ze-biao-da-shi-ru-men</id>
        <link href="https://LuckinSven.github.io/post/zheng-ze-biao-da-shi-ru-men">
        </link>
        <updated>2019-11-18T02:43:15.000Z</updated>
        <summary type="html"><![CDATA[<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串的格式输入是否符合某种模式，基于此，也十分方便的截取符合某种模式的字符串。😆</p>
]]></summary>
        <content type="html"><![CDATA[<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串的格式输入是否符合某种模式，基于此，也十分方便的截取符合某种模式的字符串。😆</p>
<!-- more -->
<p><em>在Python中使用正则需要 import re,re库为Python自带的库，主要用法为三个函数</em></p>
<h2 id="1-match函数">1. match函数</h2>
<p>re.match（pattern， string， flags=0）<br>
从字符串头部开始匹配<br>
pattern:正则表达式<br>
string:要匹配的字符串<br>
flags:标志位</p>
<p>re,.match 匹配成功返回的是一个匹配对象，否则返回None<br>
result可以使用group（num）获取表达式，<br>
使用groups（），则获取所有小组的表达式</p>
<h2 id="2-search函数">2. search函数</h2>
<p>re.search(pattern, string, flags=0)<br>
扫描整个字符串，并返回第一个成功的匹配</p>
<h2 id="3-检索和替换">3. 检索和替换</h2>
<p>re.sub用于替换字符串中的匹配项<br>
语法：<br>
re.sub(pattern, replace_string, string, count=0, flags=0)<br>
pattern:正则表示式<br>
replace_string: 替换的字符串，也可为一个函数<br>
string：要被查找替换的原始字符串<br>
count:模式匹配后替换的最大次数，默认0表示替换所有的匹配</p>
<h2 id="4-recompile-函数">4. re,compile 函数</h2>
<p>用于编译正则表达式，生成一个正则表达式（Pattern）对象，供match（）与search（）函数使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python_蓝桥杯_入门训练_1]]></title>
        <id>https://LuckinSven.github.io/post/python_-lan-qiao-bei-_-ru-men-xun-lian-_1</id>
        <link href="https://LuckinSven.github.io/post/python_-lan-qiao-bei-_-ru-men-xun-lian-_1">
        </link>
        <updated>2019-11-15T03:38:04.000Z</updated>
        <summary type="html"><![CDATA[<p>题目： A+B ，加法器实现</p>
]]></summary>
        <content type="html"><![CDATA[<p>题目： A+B ，加法器实现</p>
<!-- more -->
<p>题目非常简单，但是值得注意的是在Python下的读 输入的问题<br>
蓝桥杯的输入一般为一行输入，用空格分开<br>
例如：12 45 ，为两个数字输入<br>
Python对应的写法为：</p>
<pre><code>a, b = map(int, input().split())
add = lambda a, b: a + b
x = add(a, b)
print(x)
</code></pre>
<p>可以看到这里使用map映射函数，将读入的字符用空格分割，然后只将其类型改为int的字符。</p>
<p>map() 会根据提供的函数对指定序列做映射。<br>
第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello 2019]]></title>
        <id>https://LuckinSven.github.io/post/hello-2019</id>
        <link href="https://LuckinSven.github.io/post/hello-2019">
        </link>
        <updated>2019-11-03T14:40:49.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>不舍再不舍，再见不再见，2018。</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>不舍再不舍，再见不再见，2018。</strong></p>
<!-- more -->
<p>十年真的好快呀！我好想你们呀！<br>
人生的第二个十年，你，过好了吗？是否对这份答卷满意？<br>
很抱歉，我觉得还是不太好呢，很多事情可以做的更好，但是请别气馁呀！<br>
对比是人生噩梦的开始，可是对比也是一切意义的开始，人的本质是关系的总和，当然也是复读机（大雾）！</p>
<p>写在2019的伊始，写在二十年后的依旧一事无成还傻乐呵呵的今天。<br>
对自己提几个目标吧：<br>
1，请务必保持耐心多一点，因为嫌弃麻烦而不去处理的东西，最后一定会变成一个超级大麻烦。<br>
2，请持续写文档吧，远离学校后，学习就变成了一个件很玄的事情，有时候感觉自己学到了很多，但是却有一种无处确认，转眼即逝的感觉，这种时候，请坚持写文档吧，也许它会帮到一些人，若是能为一提供一点点帮助，这就是再好不过的事情啦！<br>
3，请继续保持理想主义吧！没有经过社会检验的理想主义是空想主义，在经过社会检验后，许多人会变成世俗主义，此时再坚持的理想主义，才是真正的理想主义。眼泪和欢笑都是真的。<br>
4，请继续坚持你的选择。如果二十年来的经验让你明白了自己所喜爱的事物是什么，请好好的坚持下去呀。经常哥哥带我去吃自助问我的场景，他说如果这么多种类的食物中，能有一样你是真的喜欢的，就已经非常不错了。人生怎么活，不过一百年，用去五分之一去试错，剩下的无论在哪个方向坚持下去，都一定会有成就吧。<br>
5，请珍惜你的好朋友呀！最近两周见了很久不见的朋友，还有马上要见到的。二十年下来，回首一下，曾经的好友似乎好多好多都在不同的山河。相聚的时候，一定要开心一点呀！或多或少，我的意义，就是你们给予的呀！这世界的一切，全都是你们不经意写的一字一句，留我年复一年的朗读。</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[南亭夜话2]]></title>
        <id>https://LuckinSven.github.io/post/nan-ting-ye-hua-2</id>
        <link href="https://LuckinSven.github.io/post/nan-ting-ye-hua-2">
        </link>
        <updated>2019-10-27T11:30:26.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>小北，十一月了，还没下雪，今年就要过去了。</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>小北，十一月了，还没下雪，今年就要过去了。</strong></p>
<!-- more -->
<p>  小北，我觉得我对世界缺少热爱，总是不太高兴，见到风和日丽不高兴、高山流水不高兴、推杯换盏不高兴、读万卷书不高兴、行万里路不高兴、我问师傅我是不会出了什么问题，我师父让我来找你，可是你也不高兴。可是我师父是对的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda 表达式]]></title>
        <id>https://LuckinSven.github.io/post/lambda-biao-da-shi</id>
        <link href="https://LuckinSven.github.io/post/lambda-biao-da-shi">
        </link>
        <updated>2019-10-26T07:05:12.000Z</updated>
        <summary type="html"><![CDATA[<p>在Python中，lambda的语法是唯一的。其形式如下：<br>
lambda argument_list: expression</p>
]]></summary>
        <content type="html"><![CDATA[<p>在Python中，lambda的语法是唯一的。其形式如下：<br>
lambda argument_list: expression</p>
<!-- more -->
<p>这是一个匿名函数，在使用的时候通常不额外命名，更多的作为嵌套使用。<br>
下面为一个例子：<br>
#Ex1<br>
add = lambda x, y: x+yprint(add(1, 2))<br>
这两行程序，第一行是实现了一个加法函数，后者将其打印出来，其逻辑非常简单，适合简单的函数实现。</p>
<p>但是我认为，lambda最终的威力是配合filter与map函数，前者为过滤函数，后者映射函数，在某种程度上，lambda可以相当于更加轻量化，类似的“正则表示式”。</p>
<p>下面举蓝桥杯的2018年题1说明：</p>
<p>标题：分数<br>
1/1 + 1/2 + 1/4 + 1/8 + 1/16 + ....<br>
每项是前一项的一半，如果一共有20项,<br>
求这个和是多少，结果用分数表示出来。类似：3/2<br>
当然，这只是加了前2项而已。分子分母要求互质。<br>
注意：<br>
需要提交的是已经约分过的分数，中间任何位置不能含有空格。<br>
请不要填写任何多余的文字或符号。</p>
<p>解答：<br>
其题目主要问题在于构造分母，由于这是一个等比数列，采用数学的方法可能更简洁。<br>
本文在此不做讨论，主要说明lambda表达式在分母构造上的简洁之处。</p>
<p>#Lambda表示式实现😆</p>
<ul>
<li>denominator = list(map(lambda x: pow(2, x), range(1, 20)))</li>
</ul>
<!-- more -->
<p>#常规实现😣</p>
<ul>
<li>denominator_list = []</li>
<li>for i in range(1, 20):</li>
<li>    denominator_list.append(pow(2, i))</li>
</ul>
<p>可以看到，使用lambda表达式配合map函数仅需一行就可以实验。<br>
后续处理如下：</p>
<ul>
<li>sum = Fraction(1, 1)</li>
<li>for it in denominator:</li>
<li>    sum += Fraction(1, it)</li>
<li>print(sum)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML_常用标签]]></title>
        <id>https://LuckinSven.github.io/post/html_-chang-yong-biao-qian</id>
        <link href="https://LuckinSven.github.io/post/html_-chang-yong-biao-qian">
        </link>
        <updated>2019-10-23T10:23:02.000Z</updated>
        <content type="html"><![CDATA[<p>HTML最最最常用的标签</p>
<p>1，<html>.......</html>  指示文档为html</p>
<p>2，<head>......</head>   是所有头部元素的容器，里面可以引用脚本，指示浏览器等信息</p>
<p>3，<meta>  charset = &quot;UTF-8&quot; ，在head里面，最常用来告诉浏览器，文本的格式。</p>
<p>要注意的是在HTML中，meta没有结束标签！</p>
<p>4，<title> ......</title>  文档的标题，是head里面必须唯一要求包含的东西。在浏览器上显示的地方为这个网页的名字，注意，是此网页的名称，而不是网页内容。</p>
<p>5，<a href="www.baidu.com">  这是百度 </a>。注意， 有一个单独的 &gt;，在连接字符串后面，网页显示为 这是百度  四个字，然后连接为超链接。</p>
<p>！！注意。超链接不一定是文本，也可以是图片，视频！！</p>
<p>&lt;a href=&quot;https://www.mgtv.c?showId=3958665&quot;blank&quot;&gt;视频</a></p>
<p>blank 表示在新窗口中打开</p>
<p>6，图片。<img src=""  />  ，路径支持相对路径，与绝对路径（其他网页）。宽度与高度可以指定，但也是用CSS。</p>
<img src ="" width="250" height="39"  />
<p>7,段落 <P> '''''</p> ，换行 <br/>，  下划线（分割线） <hr/>，如果是单独生效的，/在字母后面。（也可以省略斜杠）</p>
<p>8，注释 &lt;!...这是一个注释......&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML_初识]]></title>
        <id>https://LuckinSven.github.io/post/html_-chu-shi</id>
        <link href="https://LuckinSven.github.io/post/html_-chu-shi">
        </link>
        <updated>2019-10-23T10:22:22.000Z</updated>
        <content type="html"><![CDATA[<p>HTML， Hypertext Markup Language，超文本标记语言。</p>
<p>1，用于描述网页信息的内容和结构</p>
<p>2，用开始和结构标签包围文本内容</p>
<p>3，把每个标签的名字称为元素</p>
<p>4，语法： &lt;元素&gt;  内容   &lt;/元素&gt; 例如： <p> This is a paragraph </p></p>
<p>页面结构 <!DOCTYPR html> <html> <head> <title> 标题</tittle> sssss </head> <body> page content </body> </html></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS_初识]]></title>
        <id>https://LuckinSven.github.io/post/css_-chu-shi</id>
        <link href="https://LuckinSven.github.io/post/css_-chu-shi">
        </link>
        <updated>2019-10-23T10:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>Cascading Style Sheets 层叠样式表 用于网页中单独处理显示效果。</p>
<p>让HTML专注于文本内容本身，而CSS则用于表现其文本内容在浏览器中显示效果。</p>
<p>让内容与形式分离，降低耦合。</p>
<p>CSS的引入 有三种方式</p>
<p>1，行内式。不推荐</p>
<p>2.内嵌，也不推荐，但是简单的网页是可以的，而且便于调试</p>
<p>3，链接式，推荐，将CSS单独编辑成一个文件，用链接的方式引入。</p>
<p>显示效果级别： 行内&gt;内嵌&gt;链接</p>
<p>CSS的概念实在太多了，我感觉头都要大了，目前我更多的是使用Dw直接可视化生成，然后得出HTML代码，再拖回去。</p>
<p>但是学了两天，我觉得最有用的应该是id标记。</p>
<p>通过id标记，已经可以做出简单的网页效果了。</p>
<p>在CSS中 &lt;</p>
<p>style&gt; #ID {xxx} </style></p>
<p>可以看到ID用是#号开头。</p>
<p>而在HTML中，在标签中加入 id=&quot;&quot;；属性完成。 具体的实现，还是边查表边用吧！</p>
]]></content>
    </entry>
</feed>